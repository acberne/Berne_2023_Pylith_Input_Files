[pylithapp]

# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------

#
# This is a purely elastic static problem using only Dirichlet
# boundary conditions. 

# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# To run the simulation:
# pylith CrackingEnceladus.cfg
#
# Output will be directed to the directory output.

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent.formulation.time_step]
# Define the total time for the simulation and the default time step size.
total_time = 0.0*s ; total time of simulation
# Define an appropriat time step for simulations. Important for
# nondimensionalization of velocities and slip rates.
total_time = 5.0*year
dt = 5.0*year

[pylithapp.timedependent]
bc = [All_nodes]

#bc.z_pos=pylith.bc.PointForce
#bc.y_pos=pylith.bc.PointForce
#bc.x_pos=pylith.bc.PointForce
#bc.x_neg=pylith.bc.PointForce
#bc.y_neg=pylith.bc.PointForce
bc.All_nodes=pylith.bc.PointForce

# MGK Testing CUDA
#formulation = pylith.problems.ImplicitCUDA

[pylithapp.timedependent.implicit]
# Set the output to an array of 1 output manager.
# We will output the solution over the domain.
output = [domain,subdomain,disp,inner]

# Set subdomain component to OutputSolnSubset (boundary of the domain).
output.subdomain = pylith.meshio.OutputSolnSubset

solver = pylith.problems.SolverNonlinear


# Set subdomain component to OutputSolnSubset (boundary of the domain).
output.subdomain = pylith.meshio.OutputSolnSubset
output.disp=pylith.meshio.OutputSolnSubset
output.inner=pylith.meshio.OutputSolnSubset





[pylithapp.timedependent]

interfaces = [fault1,fault2,fault3,fault4]







# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# 
#
# All_nodes Free
# z_top will be forced
#z_bot,x_top,x_bot fixed




# All_Nodes Force
[pylithapp.timedependent.bc.All_nodes]
bc_dof = [0,1,2]
label = All_nodes
db_initial = spatialdata.spatialdb.SimpleDB
db_initial.label = Dirichlet BC on Outer Sphere
db_initial.query_type = nearest
db_initial.iohandler.filename = spatialdb/fixeddisp_2.spatialdb



# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
# Provide information on the fault (interface).
[pylithapp.timedependent.interfaces]
# Change fault to dynamic fault interface.
fault1 = pylith.faults.FaultCohesiveDyn
fault2 = pylith.faults.FaultCohesiveDyn
fault3 = pylith.faults.FaultCohesiveDyn
fault4 = pylith.faults.FaultCohesiveDyn

[pylithapp.timedependent.interfaces.fault1]
# The label corresponds to the name of the nodeset in CUBIT.
label = Fault_1
edge=Fault_1_edge
id=101



# Use the static friction model.
friction = pylith.friction.StaticFriction
friction.label = Static friction

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Set static friction model parameters using a uniform DB. Set the
# static coefficient of friction to 0.6 and cohesion to 2.0 MPa.
friction.db_properties = spatialdata.spatialdb.UniformDB
friction.db_properties.label = Static friction
friction.db_properties.values = [friction-coefficient,cohesion]
friction.db_properties.data = [0.0,0*MPa]


# Make opening zero

open_free_surface = False

# Prescribed tractions for fluid intrusion.
traction_perturbation = pylith.faults.TractPerturbation

[pylithapp.timedependent.interfaces.fault1.traction_perturbation]
db_initial = spatialdata.spatialdb.SimpleDB
db_initial.label = Initial fault tractions
db_initial.iohandler.filename = spatialdb/tractions_opening.spatialdb
db_initial.query_type = nearest


[pylithapp.timedependent.interfaces.fault2]
# The label corresponds to the name of the nodeset in CUBIT.
label = Fault_2
edge=Fault_2_edge
id=102


# Use the static friction model.
friction = pylith.friction.StaticFriction
friction.label = Static friction

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Set static friction model parameters using a uniform DB. Set the
# static coefficient of friction to 0.6 and cohesion to 2.0 MPa.
friction.db_properties = spatialdata.spatialdb.UniformDB
friction.db_properties.label = Static friction
friction.db_properties.values = [friction-coefficient,cohesion]
friction.db_properties.data = [0.0,0*MPa]



# Make opening zero

open_free_surface = False

# Prescribed tractions for fluid intrusion.
traction_perturbation = pylith.faults.TractPerturbation

[pylithapp.timedependent.interfaces.fault2.traction_perturbation]
db_initial = spatialdata.spatialdb.SimpleDB
db_initial.label = Initial fault tractions
db_initial.iohandler.filename = spatialdb/tractions_opening.spatialdb
db_initial.query_type = nearest



[pylithapp.timedependent.interfaces.fault3]
# The label corresponds to the name of the nodeset in CUBIT.
label = Fault_3
edge=Fault_3_edge
id=103

# Use the static friction model.
friction = pylith.friction.StaticFriction
friction.label = Static friction

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Set static friction model parameters using a uniform DB. Set the
# static coefficient of friction to 0.6 and cohesion to 2.0 MPa.
friction.db_properties = spatialdata.spatialdb.UniformDB
friction.db_properties.label = Static friction
friction.db_properties.values = [friction-coefficient,cohesion]
friction.db_properties.data = [0.0,0*MPa]





# Make opening zero

open_free_surface = False

# Prescribed tractions for fluid intrusion.
traction_perturbation = pylith.faults.TractPerturbation

[pylithapp.timedependent.interfaces.fault3.traction_perturbation]
db_initial = spatialdata.spatialdb.SimpleDB
db_initial.label = Initial fault tractions
db_initial.iohandler.filename = spatialdb/tractions_opening.spatialdb
db_initial.query_type = nearest

[pylithapp.timedependent.interfaces.fault4]
# The label corresponds to the name of the nodeset in CUBIT.
label = Fault_4
edge=Fault_4_edge
id=104





# Use the static friction model.
friction = pylith.friction.StaticFriction
friction.label = Static friction

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Set static friction model parameters using a uniform DB. Set the
# static coefficient of friction to 0.6 and cohesion to 2.0 MPa.
friction.db_properties = spatialdata.spatialdb.UniformDB
friction.db_properties.label = Static friction
friction.db_properties.values = [friction-coefficient,cohesion]
friction.db_properties.data = [0.0,0*MPa]

# Make opening zero

open_free_surface = False

# Prescribed tractions for fluid intrusion.
traction_perturbation = pylith.faults.TractPerturbation

[pylithapp.timedependent.interfaces.fault4.traction_perturbation]
db_initial = spatialdata.spatialdb.SimpleDB
db_initial.label = Initial fault tractions
db_initial.iohandler.filename = spatialdb/tractions_opening.spatialdb
db_initial.query_type = nearest

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.


# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/Tidal_Forcing.vtk


# Give basename for VTK output of Ice Shell state variables.
[pylithapp.timedependent.materials.Ice_Shell_Fault13.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/Tidal_Forcing.vtk

###

# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/Tidal_Forcing_fault1.vtk


# Give basename for VTK output of Ice Shell state variables.
[pylithapp.timedependent.materials.Ice_Shell_Fault12.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/Tidal_Forcing_fault1.vtk


# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/Tidal_Forcing_fault2.vtk


# Give basename for VTK output of Ice Shell state variables.
[pylithapp.timedependent.materials.Ice_Shell_Fault11.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/Tidal_Forcing_fault2.vtk

# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/Tidal_Forcing_fault3.vtk


# Give basename for VTK output of Ice Shell state variables.
[pylithapp.timedependent.materials.Ice_Shell_Fault4.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/Tidal_Forcing_fault3.vtk

# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/Tidal_Forcing_fault4.vtk


# Give basename for VTK output of Ice Shell state variables.
[pylithapp.timedependent.materials.Ice_Shell_Fault2.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/Tidal_Forcing_fault4.vtk

###



[pylithapp.problem.formulation.output.subdomain]
# Name of nodeset for ground surface.
label = Outer_Surf
writer.filename = output/OuterSurf.vtk

# Give basename for VTK domain output of solution over ground surface.
[pylithapp.problem.formulation.output.disp]
# Name of nodeset for ground surface.
label = All_nodes
writer.filename = Convergence_Testing/All_nodes.vtk

# Give basename for VTK domain output of solution over ground surface.
#[pylithapp.problem.formulation.output.subdomain]
# Name of nodeset for ground surface.
#label = Outer_Surf
#writer.filename = output/OuterSurf.vtk

# Give basename for VTK domain output of solution over ground surface.
[pylithapp.problem.formulation.output.inner]
# Name of nodeset for ground surface.
label = Inner_Surf
writer.filename = output/InnerSurf.vtk


[pylithapp.timedependent.interfaces.fault1.output]
writer.filename = output1

[pylithapp.timedependent.interfaces.fault2.output]
writer.filename = output2

[pylithapp.timedependent.interfaces.fault3.output]
writer.filename = output3

[pylithapp.timedependent.interfaces.fault4.output]
writer.filename = output4
